/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <220>;
    quick-tap-ms = <200>;
};

/ {
    chosen {
        // zmk,matrix_transform = &default_transform;

        zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        esc_tab_ctrl: esc_tab_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_TAB_CTRL";
            #binding-cells = <0>;
            bindings = <&ht LCTRL ESCAPE>, <&kp TAB>;
        };

        double_click_tgame: double_click_tgame {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_CLICK_TGAME";
            #binding-cells = <0>;
            bindings = <&trans>, <&tog 6>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo1 {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
            layers = <0>;
        };

        combo2 {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            layers = <0>;
        };

        combo4 {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
            layers = <0>;
        };

        combo5 {
            bindings = <&kp EQUAL>;
            key-positions = <18 17>;
            layers = <0>;
        };

        combo6 {
            bindings = <&kp MINUS>;
            key-positions = <17 16>;
            layers = <0>;
        };

        cmb5 {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
            layers = <0>;
        };

        bootloader_L {
            bindings = <&bootloader>;
            key-positions = <23 24>;
            layers = <0>;
        };

        bootloader_R {
            bindings = <&bootloader>;
            key-positions = <25 26>;
            layers = <0>;
        };

        mac_paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &lt 8 Q  &kp W  &kp E   &kp R           &kp T                 &kp Y        &kp U            &kp I                &kp O                    &kp P
  &kp A    &kp S  &kp D   &kp F           &kp G                 &kp H        &kp J            &kp K                &kp L                    &ht COLON SEMICOLON
  &kp Z    &kp X  &kp C   &ht LEFT_GUI V  &kp B                 &kp N        &kp M            &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &mt QUESTION SLASH
                  &tog 3  &kp LCTRL       &mt LEFT_ALT ENTER    &lt 1 SPACE  &lt 2 BACKSPACE  &mt CAPSLOCK RSHIFT
            >;
        };

        Numbers {
            bindings = <
  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5         &kp F6        &kp F7         &kp F8        &kp F9                &kp F12
  &kp EXCL      &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp NUMBER_6  &kp N7         &kp N8        &kp N9                &kp N0
                              &kp UP_ARROW  &kp DOWN      &kp ENTER      &kp SPACE     &kp LEFT       &kp RIGHT
            >;
        };

        SYMB {
            display-name = "Symbles";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE          &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp TILDE  &kp GRAVE
  &kp UNDER       &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_CLR_ALL    &trans         &trans             &trans            &trans     &trans
  &trans          &trans           &trans            &trans             &trans            &trans         &trans             &trans            &trans     &trans
                                   &none             &trans             &kp ENTER         &kp SPACE      &none              &none
            >;
        };

        fun_nav_media {
            display-name = "FUNC_NAVI_MEDIA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &kp HOME          &kp END           &kp N7        &kp N8        &kp N9        &kp SLASH     &kp PLUS
  &kp LEFT     &kp DOWN      &kp RIGHT      &mkp LCLK         &mkp RCLK         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp EQUAL
  &kp LC(Z)    &kp K_CUT     &kp K_COPY     &kp K_PASTE       &kp LEFT_SHIFT    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS     &kp BACKSPACE
                             &mo 3          &kp LEFT_CONTROL  &kp ENTER         &kp SPACE     &kp N0        &kp DOT
            >;
        };

        Accessaries {
            bindings = <
  &kp LC(V)  &kp LC(X)                 &trans                &trans            &trans                 &kp TAB            &kp CAPS           &kp ESCAPE            &kp DEL                   &kp BACKSPACE
  &kp LC(C)  &kp LC(LS(LEFT_ALT))      &kp LC(LEFT_SHIFT)    &kp LC(LEFT_ALT)  &trans                 &trans             &kp RC(RIGHT_ALT)  &kp RC(RIGHT_SHIFT)   &kp RC(RS(RIGHT_ALT))     &kp ENTER
  &none      &kp LC(LS(LA(LEFT_GUI)))  &kp LC(LA(LEFT_GUI))  &kp LS(LEFT_ALT)  &double_click_tgame    &trans             &kp RS(RIGHT_ALT)  &kp RC(RA(LEFT_GUI))  &kp RC(RS(RA(LEFT_GUI)))  &none
                                       &none                 &kp LS(LEFT_GUI)  &kp LA(LEFT_GUI)       &kp RA(RIGHT_GUI)  &kp RS(RIGHT_GUI)  &none
            >;
        };

        NUM_PAD {
            bindings = <
  &kp STAR   &kp N7        &kp N8        &kp N9         &kp MINUS    &kp MINUS  &kp N7           &kp N8  &kp N9  &kp STAR
  &kp SLASH  &kp NUMBER_4  &kp N5        &kp NUMBER_6   &kp PLUS     &kp PLUS   &kp NUMBER_1     &kp N2  &kp N3  &kp SLASH
  &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp EQUAL    &kp EQUAL  &kp N4           &kp N5  &kp N6  &kp N0
                           &none         &kp BACKSPACE  &kp DOT      &kp LC(V)  &ht LC(X) LC(C)  &none
            >;
        };

        Game {
            bindings = <
  &kp TAB       &kp Q           &kp W    &kp E        &kp R        &trans               &trans  &trans  &trans  &trans
  &ht LSHIFT G  &kp A           &kp S    &kp D        &kp F        &trans               &trans  &trans  &trans  &trans
  &kp LCTRL     &ht LEFT_ALT Z  &kp X    &kp C        &kp V        &double_click_tgame  &trans  &trans  &trans  &trans
                                &kp ESC  &lt 7 ENTER  &kp SPACE    &trans               &trans  &trans
            >;
        };

        Game_num {
            bindings = <
  &kp N1       &kp N2      &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &ht LSHFT G  &kp A       &kp S   &kp D   &kp F     &trans  &trans  &trans  &trans  &trans
  &kp LCTRL    &ht LALT Z  &kp X   &kp C   &kp V     &trans  &trans  &trans  &trans  &trans
                           &trans  &none   &trans    &trans  &trans  &trans
            >;
        };

        KEYBOARD {
            bindings = <
  &trans        &trans           &trans        &trans        &trans            &trans       &trans      &trans     &trans  &trans
  &out OUT_BLE  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR_ALL    &trans       &trans      &trans     &trans  &trans
  &out OUT_USB  &rgb_ug RGB_TOG  &soft_off     &sys_reset    &bootloader       &bootloader  &sys_reset  &soft_off  &trans  &trans
                                 &none         &trans        &trans            &trans       &trans      &none
            >;
        };
    };
};
